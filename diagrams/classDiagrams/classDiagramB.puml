@startuml
title Class Diagram

class Widget{
    paint(Graphics)
    handleKeyEvent(int, int, char): boolean
    handleMouseEvent(int, int ,int): boolean
    isBlocking(): boolean
}
UIWindow "1" <--> "0...*" Widget: has



class LabelWidget{
}
LabelWidget --|> Widget


class EditorWidget{
}
EditorWidget --|> LabelWidget

class CheckBoxWidget{
}
CheckBoxWidget --|> Widget
class ButtonWidget{
}
ButtonWidget --|> LabelWidget



class UIWindow{
}

UIWindow "1" --> "1" TableHandler:  communicates
UIWindow "1" --> "1" TableDesignHandler:  communicates
UIWindow "1" --> "1" TableRowsHandler:  communicates


class TableHandler{
    width : int
    create() : Table
    destroy(Table)
    editTableName(String)
    openTable(Table): Table
    __Responsibilities__
    managing tables
}
note left
    Wat als we hier
    een interface Mode
    maken en die een
    getLayout() of
    getWidth functie
    geven? Onnodige
    coupling?
end note
TableHandler "1" --> "0..*" Table
TableDesignHandler "1" --> "1" Table
TableRowsHandler "1" --> "1" Table


class TableDesignHandler{
    getColumnTypes():ArrayList(Type,Column)
__Responsibility__
}

class TableRowsHandler{
    Layout
__Responsibility__

}

class Table{
    name : string = "newTable"
    <<constructor>> Table(String) {exception IllegalArgumentException}
    getName(): String
    isValidName(String): boolean {static}
    setName(String) {exception IllegalArgumentException}
    getNbColumns: int
    getColumnAt(int): Column
    canHaveAsColumnAt(int): boolean
    hasProperColumns: boolean
    addColumnAt(int)
    removeColumnAt(int)
    - setNbColumns(int)

    create(): Column
    destroy(Column) : void
    addRow() : void
    deleteRow(Integer) : void
__Responsibility__
manage Column
}

Column <|-- BooleanColumn
Column <|-- IntegerColumn
Column <|-- EmailColumn
Column <|-- StringColumn

class Column{
name:String
allowsBlanks:Boolean
valueList : List<Object>

__Responsibility__
Manage list with correct entries
}

Table "1" *-- "0..*" Column

class BooleanColumn{
valueList : List<Boolean>
editValue(Integer,Boolean)
isValid(Boolean): Boolean
}
class StringColumn{
valueList : List<String>
editValue(Integer,String)
isValid(String): Boolean
}
class EmailColumn{
valueList : List<String>
editValue(Integer,String)
isValid(String): Boolean
}
class IntegerColumn{
valueList : List<Integer>
editValue(Integer,Integer)
isValid(Integer): Boolean
}
@enduml
