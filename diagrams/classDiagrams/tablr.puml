@startuml

package "tablr" {



    class TableHandler{
        tableManager : TableManager {readOnly}
        terminated : boolean
        __Inspector__

        __Responsibilities__
        providing a controller for tables
    }


    class TableManager{
        tables : List<Table> [*] = new LinkedList<Table>
        currentTable : Table [0...1] = null
        terminated : boolean = false
        __

        __Responsibility__
        manage tables and manage access to tables
    }

    Table "0..*" <-- TableManager
    TableHandler --> "1" TableManager




    class Table{
        -name
        -columns
        -isTerminated
        __

        __Responsibility__
        manage Column
    }

    package "column" {

        Column <|-- BooleanColumn
        Column <|-- IntegerColumn
        Column <|-- EmailColumn
        Column <|-- StringColumn

        class Column <<(A, lightgreen)>>{
            -name:String
            -allowsBlanks: boolean
            -defaultValue: String = ""
            -values : List<String>
            __


        __Responsibility__
        Manage list with correct entries
        }

        Table *-- "0..*" Column

        class BooleanColumn{
            -type: String = "Boolean"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class StringColumn{
            -type: String = "String"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class EmailColumn{
            -type: String = "Email"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class IntegerColumn{
            -type: String = "Integer"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
    }
}


@enduml