@startuml
title Class Diagram
package "ui" {

    class CanvasWindow{

    }


    class UIHandler{
        __resp__
        controller for UI
    }
    UIHandler -> Layout : uses
    class Layout{
    __resp__
    information for layout
    }



    class Compositor{
        - subWindows: list<SubWindowWidget>
        __
        + addSubWindow()
        + removeSubWindow()
    }

    class UIController{

    }



    UIController --> Compositor : has



    Compositor -|> CanvasWindow



    package "commands" {

        class UICommand <<(A, lightgreen)>> {
            execute()
        }

        class ConcreteCommandA{

        }

        class ConcreteCommandB{

        }

        class ConcreteCommandC{

        }

        class ConcreteCommandD{

        }

        ConcreteCommandA --|> UICommand
        ConcreteCommandB --|> UICommand
        ConcreteCommandC --|> UICommand
        ConcreteCommandD --|> UICommand
    }
    UICommand --> Compositor : uses

    UIHandler <-- UICommand : uses



    package "widget" {

                class Widget {
                    -x: int
                    -y: int
                    -width: int
                    -height: int
                    #border: boolean
                    #blocked: boolean
                    __Inspectors__
                    +containsPoint(x: int, y: int): boolean
                    __Mutators__
                    +paint(g: Graphics): void
                    +handleKeyEvent(id: int, keyCode: int,
                        \t keyChar: char): boolean
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean
                    +update(command: UICommand): void
                }


                class LabelWidget{
                    #text: String
                }
                LabelWidget --|> Widget


                class EditorWidget{
                }
                EditorWidget --|> LabelWidget

                class CheckBoxWidget{
                    -checked: boolean
                }
                CheckBoxWidget --|> Widget
                class ButtonWidget{
                }
                ButtonWidget --|> LabelWidget


                class SwitchBoxWidget{
                }
                SwitchBoxWidget --|> LabelWidget
                package compositeWidgets{
                    class CompositeWidget{
                        - widgets: LinkedList<Widget>
                        __Mutators__
                        + addWidget(w: Widget): void
                        + removeWidget(w: Widget): void
                    }

                    CompositeWidget --|> Widget

                    class TableWidget{
                    }

                    TableWidget --|> CompositeWidget

                    class ColumnWidget{
                    }

                    ColumnWidget --|> CompositeWidget

                    class SelectorColumnWidget {
                        -ids: LinkedList<Integer>
                        __Inspectors__
                        +getSelectedId(): int
                    }

                    SelectorColumnWidget --|> ColumnWidget

                    package componentWidgets{
                        class ComponentWidget{
                            -isActive: boolean
                        }



                        ComponentWidget --|> CompositeWidget


                    }
                }

    }


    package "builder" {

        UIHandler <-- ModeBuilder : uses

        class ModeBuilder <<(A, lightgreen)>>{
        }

        class TablesModeBuilder{
            + build(): SubWindowWidget
        }

        class DesignModeBuilder{
            + build(tableId : int): SubWindowWidget

        }

        class RowsModeBuilder{
            + build(tableId : int): SubWindowWidget
        }

        TablesModeBuilder --|> ModeBuilder
        DesignModeBuilder --|> ModeBuilder
        RowsModeBuilder --|> ModeBuilder
    }

    ModeBuilder -> Widget : uses

    ModeBuilder --> UICommand: uses


}


package "tablr" {

    UIHandler -> TablesHandler : uses

    class TablesHandler{
        tableManager : TableManager {readOnly}
        terminated : boolean
        __Inspector__

        __Responsibilities__
        providing a controller for tables
    }


    class TableManager{
        tables : List<Table> [*] = new LinkedList<Table>
        currentTable : Table [0...1] = null
        terminated : boolean = false
        __

        __Responsibility__
        manage tables and manage access to tables
    }

    Table "0..*" <-- TableManager
    TablesHandler --> "1" TableManager




    class Table{
        -name
        -columns
        -isTerminated
        __

        __Responsibility__
        manage Column
    }

    package "column" {

        Column <|-- BooleanColumn
        Column <|-- IntegerColumn
        Column <|-- EmailColumn
        Column <|-- StringColumn

        class Column <<(A, lightgreen)>>{
            -name:String
            -allowsBlanks: boolean
            -defaultValue: String = ""
            -values : List<String>
            __


        __Responsibility__
        Manage list with correct entries
        }

        Table *-- "0..*" Column

        class BooleanColumn{
            -type: String = "Boolean"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class StringColumn{
            -type: String = "String"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class EmailColumn{
            -type: String = "Email"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class IntegerColumn{
            -type: String = "Integer"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
    }
}
@enduml
