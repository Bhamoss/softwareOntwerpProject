@startuml
title Class Diagram

package "window" {
    class Widget{
        paint(Graphics)
        handleKeyEvent(int, int, char): boolean
        handleMouseEvent(int, int ,int): boolean
        isBlocking(): boolean
    }
    UIWindowHandler "1" --> "0...*" Widget: has



    class LabelWidget{
    }
    LabelWidget --|> Widget


    class EditorWidget{
    }
    EditorWidget --|> LabelWidget

    class CheckBoxWidget{
    }
    CheckBoxWidget --|> Widget
    class ButtonWidget{
    }
    ButtonWidget --|> LabelWidget



    class UIWindowHandler{
    __Responsibilities__
        managing windows
    }

    class TablesWindow{
    __Responsibilities__
        generating tables window widgets
    }
    class TableDesignWindow{
    __Responsibilities__
        generating table design window widgets
    }
    class TableRowsWindow{
    __Responsibilities__
        generating table rows window widgets
    }
}
    UIWindowHandler "1" --> "1" TablesWindow: manages
    UIWindowHandler "1" --> "1" TableDesignWindow: manages
    UIWindowHandler "1" --> "1" TableRowsWindow: manages

    TablesWindow "1" --> "0...*" Widget: has
    TableDesignWindow "1" --> "0...*" Widget: has
    TableRowsWindow "1" --> "0...*" Widget: has






package "tablr" {


    TablesWindow "1" --> "1" TableHandler:  communicates
    TableDesignWindow "1" --> "1" TableDesignHandler:  communicates
    TableRowsWindow "1" --> "1" TableRowsHandler:  communicates


    class TableHandler{
        tableManager : TableManager {readOnly}
        terminated : boolean
        __Inspector__
        getNbTables() : int
        hasAsTable(name : String) : boolean
        getTableNames() : ArrayList<String>
        canHaveAsName(tableName : String, newTableName: String) : boolean {exception IllegalTableException}
        getOpenTable() : String
        isTerminated() : boolean
        createTableDesignHandler() : TableDesignHandler
        createTableRowsHandler() : TableRowsHandler

        __Mutator__
        <<constructor>> TableHandler()
        setTableName(tableName : String, newName : String) : void {exception IllegalTableException, IllegalArgumentException}
        addTable() : void
        removeTable(tableName : String): void {exception IllegalTableException}
        openTable(tableName : String): void  {exception IllegalTableException}
        - getTableManager() : TableManager
        - canHaveAsTableManager(tableManager : TableManager) : boolean

        __Responsibilities__
        providing a controller for table mode
    }


    class TableDesignHandler{
        tableManager : TableManager {readOnly}
        terminated : boolean
        __Inspector__
        getOpenTable() : String
        getColumnNames() : ArrayList<String> {exception IllegalTableException}
        getColumnType(columnName : String) : String {exception IllegalColumnException, IllegalTableException}
        getColumnAllowBlank(columnName : String) : boolean {exception IllegalColumnException, IllegalTableException}
        getColumnDefaultValue(columnName : String) : String {exception IllegalColumnException, IllegalTableException}
        canHaveAsColumnName(columnName : String, newName : String) : boolean {exception IllegalColumnException, IllegalTableException}
        canHaveAsColumnType(columnName : String, type : String) : boolean {exception IllegalColumnException, IllegalTableException}
        canHaveAsColumnAllowBlanks(columnName : String, blanks : boolean) : boolean {exception IllegalColumnException, IllegalTableException}
        canHaveAsDefaultValue(columnName : String, newDefaultValue : String) : boolean {exception IllegalColumnException, IllegalTableException}
        isTerminated() : boolean
        - canHaveAsTableManager(tableManager : TableManager) : boolean

        __Mutator__
        <<constructor>> TableDesignHandler(mng : TableManager) : TableDesignHandler {exception IllegalArgumentException}
        setColumnName(columnName : String, newColumnName : String) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        setColumnType(columName : String, type : String) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        setColumnAllowBlanks(columnName : String, blanks : boolean) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        setColumnDefaultValue(columnName : String, newDefaultValue : String) : void {IllegalColumnException, IllegalArgumentException, IllegalTableException}
        addColumn() : void {exception IllegalTableException}
        removeColumn(columnName : String) : void {exception IllegalArgumentException, IllegalTableException}


        __Responsibilities__
        managing access to columns

    }

    class TableRowsHandler{
        tableManager : TableManager {readOnly}
        terminated : boolean
        __Inspector__
        getOpenTable() : String
        getColumnNames() : ArrayList<String> {exception IllegalTableException}
        getColumnType(columnName : String) : String {exception IllegalColumnException, IllegalTableException}
        canHaveAsCellValue(columnName : String, row : int, value : String) : boolean {exception IllegalColumnException, IllegalRowException, IllegalTableException}
        getCellValue(columnName : String, Row : int) : String {exception IllegalColumnException, IllegalRowException, IllegalTableException}
        isTerminated() : boolean
        - canHaveAsTableManager(tableManager : TableManager) : boolean

        __Mutator__
        setCellValue(columnName : String, row : int, newValue : String) : void {exception IllegalColumnException, IllegalRowException, IllegalArgumentException, IllegalTableException}
        addRow() : void {exception IllegalTableException}
        removeRow(row : int) : void {exception IllegalRowException, IllegalTableException}

        __Responsibilities__
        managing access to rows

    }


    class TableManager{
        tables : List<Table> [*] = new LinkedList<Table>
        currentTable : Table [0...1] = null
        terminated : boolean = false
        __Inspectors__
        ~ hasAsTable(name : String) : boolean
        ~ getTableNames() : ArrayList<String>
        ~ canHaveAsName(tableName : String, newTableName: String) : boolean {exception IllegalTableException}
        ~ getOpenTable() : String
        ~ getColumnNames() : ArrayList<String> {exception IllegalTableException}
        ~ getColumnType(columnName : String) : String {exception IllegalColumnException, IllegalTableException}
        ~ getColumnAllowBlank(columnName : String) : boolean {exception IllegalColumnException, IllegalTableException}
        ~ getColumnDefaultValue(columnName : String) : String {exception IllegalColumnException, IllegalTableException}
        ~ canHaveAsColumnName(columnName : String, newName : String) : boolean {exception IllegalColumnException, IllegalTableException}
        ~ canHaveAsColumnType(columnName : String, type : String) : boolean {exception IllegalColumnException, IllegalTableException}
        ~ canHaveAsColumnAllowBlanks(columnName : String, blanks : boolean) : boolean {exception IllegalColumnException, IllegalTableException}
        ~ canHaveAsDefaultValue(columnName : String, newDefaultValue : String) : boolean {exception IllegalColumnException, IllegalTableException}
        ~ getCellValue(columnName : String, Row : int) : String {exception IllegalColumnException, IllegalRowException, IllegalTableException}
        ~ canHaveAsCellValue(columnName : String, row : int, value : String) : boolean {exception IllegalColumnException, IllegalRowException, IllegalTableException}
        ~ canTerminate() : boolean
        ~ isTerminated() : boolean
        - getNbTables() : int
        - hasAsTable(table : Table) : boolean
        - getTableAt(index : int) : Table {exception IllegalArgumentException}
        - getTable(name : String) : Table {exception IllegalTableException}
        - canHaveAsTable(table : Table) : boolean
        - canHaveAsTableAt(index : int,table : Table) : boolean
        - getTableIndex(table : Table) : int {exception IllegalArgumentException}
        - hasProperTables() : boolean
        - getCurrentTable() : Table
        - canHaveAsCurrentTable(table : Table) : boolean

        __Mutators__
        ~ <<constructor>> TableManager()
        ~ setTableName(tableName : String, newName : String) : void {exception IllegalTableException, IllegalArgumentException}
        ~ addTable() : void
        ~ removeTable(tableName : String): void {exception IllegalTableException}
        ~ openTable(tableName : String): void  {exception IllegalTableException}
        ~ setColumnName(columnName : String, newColumnName : String) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        ~ setColumnType(columName : String, type : String) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        ~ setColumnAllowBlanks(columnName : String, blanks : boolean) : void {exception IllegalColumnException, IllegalArgumentException, IllegalTableException}
        ~ setColumnDefaultValue(columnName : String, newDefaultValue : String) : void {IllegalColumnException, IllegalArgumentException, IllegalTableException}
        ~ addColumn() : void {exception IllegalTableException}
        ~ removeColumn(columnName : String) : void {exception IllegalArgumentException, IllegalTableException}
        ~ setCellValue(columnName : String, row : int, newValue : String) : void {exception IllegalColumnException, IllegalRowException, IllegalArgumentException, IllegalTableException}
        ~ addRow() : void {exception IllegalTableException}
        ~ removeRow(row : int) : void {exception IllegalRowException, IllegalTableException}
        ~ terminate() : void {exception IllegalStateException}
        - addTableAt(index : int, table : Table) : void {exception IllegalArgumentException}
        - removeTableAt(index : int) : void {exception IllegalArgumentException}
        - removeTable(table : Table) : void {exception IllegalArgumentException}
        - appendTable(table : Table) : void {exception IllegalArgumentException}
        - insertAtFrontTable(table : Table) : void {exception IllegalArgumentException}
        - setCurrentTable(table : Table) : void {exception IllegalTableException}

        __Responsibility__
        manage tables and manage access to tables
    }

    Table "0..*" <-- TableManager
    TableHandler --> "1" TableManager
    TableDesignHandler --> "1" TableManager
    TableRowsHandler --> "1" TableManager



    class Table{
        -name
        -columns
        -isTerminated
        __Inspectors__
        +getName(): String
        +isValidName(name : String): boolean
        +getNbRows(): int
        +getCellValue(columnName : String, row : int): String
            {exception IllegalColumnException, IllegalRowException}
        +canHaveAsCellValue(columnName : String, row : int, value : String): boolean
            {exception IllegalColumnException, IllegalRowException}
        +getNbColumns() : int
        +getColumnAt(index : int) : Column {exception IndexOutOfBoundsException}
        -canHaveAsColumn(column : Column) : boolean
        -canHaveAsColumnAt(index : int, column : Column): boolean
        +hasProperColumns() : boolean
        -getColumnIndex(name : String) : int
        -getColumn(name : String) : Column
        -isAlreadyUsedColumnName(name : String) : boolean
        +getColumnNames() : ArrayList<String>
        #canHaveAsColumnName(columnName : String, name : String): boolean
            {exception IllegalColumnException}
        +getColumnType(columnName : String) : String {exception IllegalColumnException}
        +canHaveAsColumnType(columnName : String, type : String) : boolean {exception IllegalColumnException}
        +getColumnDefaultValue(columnName : String) : String {exception IllegalColumnException}
        +canHaveAsDefaultValue(columnName : String, defaultValue : String) {exception IllegalColumnException}
        +getColumnAllowBlank(columnName : String) : boolean {exception IllegalColumnException}
        +canHaveAsColumnAllowBlanks(columnName : String, blanksAllowed : boolean) : boolean
            {exception IllegalColumnException}
        +isTerminated() : boolean
        __Mutators__
        +setName(name : String) {exception IllegalArgumentException}
        +addRow()
        +removeRow(row : int) {exception IllegalArgumentException}
        +setCellValue(columnName : String, row : int, value : String)
            {exception IllegalColumnException, IllegalRowException}
        +addColumnAt(index : int) {exception IllegalArgumentException}
        -addColumnAt(index : int, column : Column) {exception IllegalArgumentException}
        +addColumn() {exception IllegalArgumentException}
        -setColumnAt(index : int, column : Column) {exception IllegalArgumentException}
        +removeColumnAt(index : int) {exception IndexOutOfBoundsException}
        +removeColumn(name : String) {exception IndexOutOfBoundsException, IllegalColumnException}
        +setColumnName(columnName : String, name : String)
            {exception IllegalColumnException, IllegalArgumentException}
        +setColumnType(columnName : String, type : String)
            {exception IllegalColumnException, IllegalArgumentException}
        +setColumnDefaultValue(columnName : String, defaultValue : String)
            {exception IllegalColumnException, IllegalArgumentException}
        +setColumnAllowBlanks(columnName : String, blanksAllowed : boolean)
            {exception IllegalColumnException, IllegalArgumentException}
        +terminate()
        __Responsibility__
        manage Column
    }

    package "column" {

        Column <|-- BooleanColumn
        Column <|-- IntegerColumn
        Column <|-- EmailColumn
        Column <|-- StringColumn

        class Column{
            -name:String
            -allowsBlanks: boolean
            -defaultValue: String = ""
            -values : List<String>
            -isTerminated: boolean
            - {static} allTypes: List<String>
            __Inspectors__
            +getName() : String
            +canHaveAsName(name : String) : boolean
            + {abstract} getType() : String
            +getAllTypes() : ArrayList<String>
            + {abstract} canHaveAsType(type : String) : boolean
            +isBlanksAllowed() : boolean
            -canHaveBlanksAllowed(blanksAllowed : boolean) : boolean
            -isValueBlank(value : String) : boolean
            +getDefaultValue() : String
            +getNbValues() : int
            +getValueAt(index : int) : String {exception IndexOutOfBoundsException}
            #canHaveAsValue(value : String) : boolean
            +canHaveAsDefaultValue(defaultValue : String) : boolean
            -canHaveAsValueAt(index : int, value : String) : boolean
            +hasProperValues() : boolean
            +isTerminated() : boolean
            __Mutators__
            +setName(name : String) {exception IllegalArgumentException}
            +setBlankAllowed(blanksAllowed : boolean) {exception IllegalArgumentException}
            +setDefaultValue(value : String) {exception IllegalArgumentException}
            +addValueAt(index : int, value : String) {exception IllegalArgumentException}
            +addValue(value : String) {exception IllegalArgumentException}
            +addValue() {exception IllegalArgumentException}
            +setValueAt(index : int, value : String) {exception IllegalArgumentException}
            +removeValueAt(index : int) {exception IllegalArgumentException}
            +terminate()

        __Responsibility__
        Manage list with correct entries
        }

        Table *-- "0..*" Column

        class BooleanColumn{
            -type: String = "Boolean"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class StringColumn{
            -type: String = "String"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class EmailColumn{
            -type: String = "Email"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
        class IntegerColumn{
            -type: String = "Integer"
            __Inspectors__
            +getType(): String
            +canHaveAsType(type : String) : boolean
            +canHaveAsValue(value : String) : boolean
        }
    }
}
@enduml
