@startuml
title Class Diagram

class Textfield{
}
Textfield --|> Element

class Label{
}
Label --|> Element

class Toggle{
}
Toggle --|> Button
class Button{
}
Button --|> Element

class CellField{
}
CellField --|> Textfield

class Element{
    width: int
    height: int
    x: int
    y: int
    borderWidth: int
}
UIWindow "1" <--> "0...*" Element: has

class UIWindow{
}

UIWindow "1" --> "1" TableHandler:  communicates
UIWindow "1" --> "1" TableDesignHandler:  communicates
UIWindow "1" --> "1" TableRowsHandler:  communicates


class TableHandler{
    width : int
    create() : Table
    destroy(Table)
    editTableName(String)
    openTable(Table): Table
    __Responsibilities__
    managing tables
}
note left
    Wat als we hier
    een interface Mode
    maken en die een
    getLayout() of
    getWidth functie
    geven? Onnodige
    coupling?
end note
TableHandler "1" --> "0..*" Table
TableDesignHandler "1" --> "1" Table
TableRowsHandler "1" --> "1" Table

note left
    Zo schrijf je commentaar
    en ideÃ«n.
end note

class TableDesignHandler{
    getColumnTypes():ArrayList(Type,Column)
__Responsibility__
}

class TableRowsHandler{
    Layout
__Responsibility__

}

class Table{
    name : string = "newTable"
    <<constructor>> Table(String) {exception IllegalArgumentException}
    getName(): String
    isValidName(String): boolean {static}
    setName(String) {exception IllegalArgumentException}
    getNbColumns: int
    getColumnAt(int): Column
    canHaveAsColumnAt(int): boolean
    hasProperColumns: boolean
    addColumnAt(int)
    removeColumnAt(int)
    - setNbColumns(int)

    create(): Column
    destroy(Column) : void
    addRow() : void
    deleteRow(Integer) : void
__Responsibility__
manage Column
}



class Cell{
editValue(value): {abstract}
isValid(value): {abstract}
__Responsibility__
Know:
maintain data
}
Cell <|-- BooleanCell
Cell <|-- IntegerCell
Cell <|-- EmailCell
Cell <|-- StringCell

class Column{
name:String
allowsBlanks:Boolean
cells : ArrayList<Cell>

__Responsibility__
Know: column
manage Cells
}

Table "1" *-- "0..*" Column
note left
    De lijn tussen
    table en column
    en column en
    cell duid
    een composite
    aggregation aan.
    (geen naam nodig)
end note
Column "1" *-- "0..*" Cell: has

class BooleanCell{
value : Boolean
editValue(Boolean)
isValid(Boolean): Boolean
}
class StringCell{
value : String
editValue(String)
isValid(String): Boolean
}
class EmailCell{
value : String
editValue(String)
isValid(String): Boolean
}
class IntegerCell{
value : Integer
editValue(Integer)
isValid(Integer): Boolean
}
@enduml
