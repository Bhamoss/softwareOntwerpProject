@startuml
title Class Diagram

class Widget{
    paint(Graphics)
    handleKeyEvent(int, int, char): boolean
    handleMouseEvent(int, int ,int): boolean
    isBlocking(): boolean
}
UIWindowHandler "1" --> "0...*" Widget: has



class LabelWidget{
}
LabelWidget --|> Widget


class EditorWidget{
}
EditorWidget --|> LabelWidget

class CheckBoxWidget{
}
CheckBoxWidget --|> Widget
class ButtonWidget{
}
ButtonWidget --|> LabelWidget



class UIWindowHandler{
__Responsibilities__
    managing windows
}

class TablesWindow{
__Responsibilities__
    generating tables window widgets
}
class TableDesignWindow{
__Responsibilities__
    generating table design window widgets
}
class TableRowsWindow{
__Responsibilities__
    generating table rows window widgets
}

UIWindowHandler "1" --> "1" TablesWindow: manages
UIWindowHandler "1" --> "1" TableDesignWindow: manages
UIWindowHandler "1" --> "1" TableRowsWindow: manages

TablesWindow "1" --> "0...*" Widget: has
TableDesignWindow "1" --> "0...*" Widget: has
TableRowsWindow "1" --> "0...*" Widget: has

TablesWindow "1" --> "1" TableHandler:  communicates
TableDesignWindow "1" --> "1" TableDesignHandler:  communicates
TableRowsWindow "1" --> "1" TableRowsHandler:  communicates

class TableManager{
__Responsibility__
manage tables and manage access to tables
}

Table "0..*" <-- "1" TableManager
TableHandler "0..*" <-- "1" TableManager
TableDesignHandler "0..*" <-- "1" TableManager
TableRowsHandler "0..*" <-- "1" TableManager
UIWindowHandler "1" --> "1" TableManager:  communicates

class TableHandler{
    width : int
    create() : Table
    destroy(Table)
    editTableName(String)
    openTable(Table): Table
    __Responsibilities__
    managing access to tables
}
TableHandler "1" --> "0..*" Table
TableDesignHandler "1" --> "1" Table
TableRowsHandler "1" --> "1" Table


class TableDesignHandler{
    width : int
    create() : Column
    destroy(Column)
    editColumnName(String)
    __Responsibilities__
    managing access to columns

}

class TableRowsHandler{
    width : int
    create() : Row
    destroy(Row)
    editRowName(String)
    __Responsibilities__
    managing access to rows

}

class Table{
    name : string = "newTable"
    <<constructor>> Table(String) {exception IllegalArgumentException}
    getName(): String
    isValidName(String): boolean {static}
    setName(String) {exception IllegalArgumentException}
    getNbColumns: int
    getColumnAt(int): Column
    canHaveAsColumnAt(int): boolean
    hasProperColumns: boolean
    addColumnAt(int)
    removeColumnAt(int)
    - setNbColumns(int)

    create(): Column
    destroy(Column) : void
    addRow() : void
    deleteRow(Integer) : void
__Responsibility__
manage Column
}

package "column" {

    Column <|-- BooleanColumn
    Column <|-- IntegerColumn
    Column <|-- EmailColumn
    Column <|-- StringColumn

    class Column{
        -name:String
        -allowsBlanks: boolean
        -defaultValue: String = ""
        -values : List<String>
        -isTerminated: boolean
        __
        +getName(): String
        +setName(String) {exception IllegalArgumentException}
        -canHaveAsName(String): boolean
        +getType(): String
        +setBlankAllowed(boolean) {exception IllegalArgumentException}
        -canHaveBlanksAllowed(boolean): boolean
        -isValueBlank(String): boolean
        +getDefaultValue(): String
        +setDefaultValue(String) {exception IllegalArgumentException}
        +getNbValues(): int
        +getValueAt(int): String {exception IndexOutOfBoundsException}
        #canHaveAsValue(String): boolean
        -canHaveAsValueAt(int, String): boolean
        +hasProperValues(): boolean
        +addValueAt(int String) {exception IllegalArgumentException}
        +addValue(String) {exception IllegalArgumentException}
        +setValueAt(int String) {exception IllegalArgumentException}
        +removeValueAt(int) {exception IllegalArgumentException}
        +isTerminated(): boolean
        +terminate()

    __Responsibility__
    Manage list with correct entries
    }

    Table *-- "0..*" Column

    class BooleanColumn{
        -type: String = "Boolean"
        __
        +getType(): String
        +canHaveAsValue(String): boolean
    }
    class StringColumn{
        -type: String = "String"
        __
        +getType(): String
        +canHaveAsValue(String): boolean
    }
    class EmailColumn{
        -type: String = "Email"
        __
        +getType(): String
        +canHaveAsValue(String): boolean
    }
    class IntegerColumn{
        -type: String = "Integer"
        __
        +getType(): String
        +canHaveAsValue(String): boolean
    }
}

@enduml
