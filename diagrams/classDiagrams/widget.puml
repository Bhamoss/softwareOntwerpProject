@startuml
title widget class diagram
package "widget" {

        class Widget {
            -x: int
            -y: int
            -width: int
            -height: int
            #border: boolean
            #blocked: boolean
            __Inspectors__
            +getX(): int
            +getY(): int
            +getWidth(): int
            +getHeight(): int
            +containsPoint(x: int, y: int): boolean
            +isBlocking(): boolean
            __Mutators__
            +setX(x: int): void
            +setY(y: int): void
            #setWidth(w: int): void
            #setHeight(h: int): void
            #setPosition(x: int, y: int): void
            +paint(g: Graphics): void
            +handleKeyEvent(id: int, keyCode: int,
                \t keyChar: char): boolean
            +handleMouseEvent(id: int, x: int, y: int,
                \t clickCount: int): boolean
            +update(command: UICommand): void
        }


        class LabelWidget{
            #text: String
            #id: int
            -{static}OFFSET: int
            __Inspectors__
            +getText(): String
            __Mutators__
            #setText(text: String): void
            +paint(g: Graphics): void
        }
        LabelWidget --|> Widget


        class EditorWidget{
            -pushCommand: UICommand
            -clickHandler: UICommand
            -selected: boolean
            -oldText: String
            __Inspectors__
            +isSelected(): boolean
            +getId(): int
            -canHaveAsText(s: String): boolean
            __Mutators__
            +setPushCommand(c: UICommand): void
            +setClickHandler(c: UICommand): void
            +setSelected(): void
            +attemptDeselect(): boolean
            +setText(t: String): void
            -setBlocking(b: boolean): void
            +paint(g: Graphics): void
            +handleKeyEvent(id: int, keyCode: int,
                \t keyChar: char): boolean
            +handleMouseEvent(id: int, x: int, y: int,
                \t clickCount: int): boolean
        }
        EditorWidget --|> LabelWidget

        class CheckBoxWidget{
            -checked: boolean
            -{static}SIZE: int
            __Inspectors__
            +isChecked(): boolean
            __Mutators__
            +setChecked(c: boolean): void
            +forceUncheck(): void
            +paint(g: Graphics): void
            +handleMouseEvent(id: int, x: int,
                \t y: int, clickCount: int): boolean
        }
        CheckBoxWidget --|> Widget
        class ButtonWidget{
            -onClick: HashMap<int,
                \t UICommandWithReturn<boolean>>
            __Mutators__
            +handleMouseEvent(id: int, x: int,
                            \t y: int, clickCount: int): boolean
        }
        ButtonWidget --|> LabelWidget


        class SwitchBoxWidget{
            ~optionIndex: int
            ~isValidOption: Function<String, Boolean>
            ~setOption: Consumer<String>
            __Mutators__
            -setOption(ind: int): void
            -cycleOption(): void
            +handleMouseEvent(id: int, x: int,
                \t y: int, clickCount: int): boolean
        }
        SwitchBoxWidget --|> LabelWidget
        package compositeWidgets{
            class CompositeWidget{
                - widgets: LinkedList<Widget>
                __Inspectors__
                +isBlocking(): boolean
                __Mutators__
                + addWidget(w: Widget): void
                + removeWidget(w: Widget): void
                +paint(g: Graphics): void
                +handleKeyEvent(id: int, keyCode: int,
                    \t keyChar: char): boolean
                +handleMouseEvent(id: int, x: int, y: int,
                    \t clickCount: int): boolean
            }

            CompositeWidget --|> Widget

            class TableWidget{
                -occupancy: int
                -lastAdded: int
                #columnWidgets: LinkedList<ColumnWidget>
                __Inspectors__

                __Mutators__
                +addColumn(w: int, resizable: boolean,
                    \t name:String): void
                +addSelectorColumn(w: int, resizable: boolean,
                    \t name:String): void
                +addEntry(w: Widget): void
                +addEntry(id: int): void
                -resizedColumn(): void
                #paintWidgets(g: Graphics): void
                +setX(x: int): void
                +setY(y: int): void
                +handleMouseEvent(id: int, x: int, y: int,
                                \t clickCount: int): boolean
            }

            TableWidget --|> CompositeWidget

            class ColumnWidget{
                -name: String
                -occupancy: int
                -resizing: boolean
                -resizable: boolean
                -onResize: Consumer<Integer>
                __Inspectors__
                +getLastAdded(): Widget
                +getName(): String
                -onRightBorder(x: int, y: int): boolean
                __Mutators__
                +addWidget(w: Widget): void
                +addRow(id: int): void
                +setX(x: int): void
                +setY(y: int): void
                -resize(w: int): void
                +handleMouseEvent(id: int, x: int, y: int,
                    \t clickCount: int): boolean
            }

            ColumnWidget --|> CompositeWidget

            class SelectorColumnWidget {
                -ids: LinkedList<Integer>
                __Inspectors__
                +getSelectedId(): int
                +getLastAdded(): CheckBoxWidget
                __Mutators__
                +addWidget(w: Widget): void
                +addRow(id: int): void
                -unCheckAll(): void
            }

            SelectorColumnWidget --|> ColumnWidget

            package componentWidgets{
                class ComponentWidget{
                    -resizingBottomBorder: boolean
                    -resizingRightBorder: boolean
                    -resizingCorner: boolean
                    -moving: boolean
                    -isActive: boolean
                    +{static}MINIMUM_SIZE: int
                    +id: int
                    +mode: String
                    __Inspector__
                    +isActive(): boolean
                    -onRightCorner(x: int, y: int): boolean
                    -onRightBorder(x: int, y: int): boolean
                    -onBottomBorder(x: int, y: int): boolean
                    -onTitle(x: int, y: int): boolean
                    -onCloseBtn(x: int, y: int): boolean
                    #getTotalHeight(): int
                    #getTotalWidth(): int
                    __Mutators__
                    -resize(w: int, h: int): void
                    #resizeHeight(h: int): void
                    #resizeWidth(w: int): void
                    #updateVisibleFrame(dx: int, dy: int): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean

                }



                ComponentWidget ---|> CompositeWidget

                class SubWindowWidget{
                    -titleLabel: LabelWidget
                    -closeBtn: ButtonWidget
                    -virtualX: int
                    -virtualY: int
                    -{static} TITLE_HEIGHT: int
                    -{static} MARGIN_TOP: int
                    -{static} MARGIN_BOTTOM: int
                    -{static} MARGIN_LEFT: int
                    -{static} MARGIN_RIGHT: int
                    __Inspectors__
                    +getVirtualX(): int
                    +getVirtualY(): int
                    +getTotalHeight(): int
                    +getTotalWidth(): int
                    +onTitle(x: int, y: int): boolean
                    +onCloseBtn(x: point, y: int): boolean
                    +{static}getTitleHeight(): int
                    +{static}getMarginTop(): int
                    +{static}getMarginBottom(): int
                    +{static}getMarginLeft(): int
                    +{static}getMarginRight(): int
                    __Mutators__
                    +setX(x: int): void
                    +setY(y: int): void
                    +addWidget(w: Widget): void
                    +setVirtualX(x: int): void
                    +setVirtualY(y: int): void
                    #updateVisibleFrame(dx: int, dy: int): void
                    #resizeWidth(w: int): void
                    +paint(g: Graphics): void
                    #paintWidgets(g: Graphics): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean

                }

                SubWindowWidget --|> ComponentWidget


                class Decorator{
                    #component: ComponentWidget
                    __Inspectors__
                    +isActive(): boolean
                    +getTotalHeight(): int
                    +getTotalWidth(): int
                    +onTitle(x: int, y: int): boolean
                    +onCloseBtn(x: point, y: int): boolean
                    __Mutators__
                    +setX(x: int): void
                    +setY(y: int): void
                    +setActive(active: boolean): void
                    #updateVisibleFrame(dx: int, dy: int): void
                    +setPosition(x: int, y: int): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean
                    +handleKeyEvent(id: int, keyCode: int,
                        \t keyChar: char): boolean

                }

                Decorator --|> ComponentWidget

                class ScrollWidget {
                    #background: Widget
                    #bar: Widget
                    #barMoving: boolean
                    #atTheEnd: boolean
                    #procent: double
                    #barMovedBegin: int
                    __Inspectors__
                    #onBar(x: int, y: int): boolean
                    #onBackground(x: int, y: int): boolean
                    __Mutators__
                    #moveBar(x: int, y: int, begin: int): void
                    #setBarMovedBegin(x: int, y: int): void
                    #updateBarLength(): void
                    #updateProcent(): void
                    +paint(g: Graphics): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean
                }

                ScrollWidget --|> Decorator

                class ScrollHorizontalWidget{
                    +{static}HEIGHT: int
                    __Mutators__
                    +setX(x: int): void
                    +setY(y: int): void
                    #resizeWidth(w: int): void
                    #resizeHeight(h: int): void
                    #moveBar(x: int, y: int, begin: int): void
                    #setBarMovedBegin(x: int, y: int): void
                    #updateBarLength(): void
                    #updateProcent(): void
                    +paint(g: Graphics): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean
                }

                ScrollHorizontalWidget --|> ScrollWidget

                class ScrollVerticalWidget{
                    +{static}WIDTH: int
                    __Mutators__
                    +setX(x: int): void
                    +setY(y: int): void
                    #resizeWidth(w: int): void
                    #resizeHeight(h: int): void
                    #moveBar(x: int, y: int, begin: int): void
                    #setBarMovedBegin(x: int, y: int): void
                    #updateBarLength(): void
                    #updateProcent(): void
                    +paint(g: Graphics): void
                    +handleMouseEvent(id: int, x: int, y: int,
                        \t clickCount: int): boolean

                }

                ScrollVerticalWidget --|> ScrollWidget

            }
        }

    }

@enduml